#!/usr/bin/env python3
import sys

N = []
for i, n in enumerate([47, 68, 40, 40, 40, 21]):
    N.extend([i]*n)

def rgb_to_xterm(r, g, b):
    mx = max(r, g, b)
    mn = min(r, g, b)

    if (mx-mn)*(mx+mn) <= 6250:
        c = 24 - (252 - ((r+g+b) // 3)) // 10
        if 0 <= c <= 23:
            return 232 + c

    return 16 + 36*N[r] + 6*N[g] + N[b]

def hex_to_rgb(hex):
    if hex[0] == "#":
        hex = hex[1::]
    rgb = []
    for i in (0, 2, 4):
        decimal = int(hex[i:i+2], 16)
        rgb.append(decimal)
    R = rgb[0]
    G = rgb[1]
    B = rgb[2]
    return print(rgb_to_xterm(R, G, B))
hex_to_rgb(sys.argv[1])



# Sadly I wrote this trick because i forgot python slicing.
# def main():
#         hx = "111111"
#         rgb1 = []
#         rgb2 = []
#         # hx = sys.argv[1]
#         print(hx)
#         if len(hx) > 7 or len(hx) < 7 :
#             print("Error: Check the Hex value properly")

#         for i in range(0, len(hx),  2):
#             rgb1.append(str(hx[i]))
#             rgb2.append(str(hx[i+1]))

#         R = "00"
#         G = "00"
#         B = "00"

#         R = list(R)
#         G = list(G)
#         B = list(B)

#         R[0] = str(rgb1[0])
#         R[1] = str(rgb2[0])

#         G[0] = str(rgb1[1])
#         G[1] = str(rgb2[1])

#         B[0] = str(rgb1[2])
#         B[1] = str(rgb2[2])

#         R = int("".join(R))
#         G = int("".join(G))
#         B = int("".join(B))

#         return print(rgb_to_xterm(R, G, B))

# main()
